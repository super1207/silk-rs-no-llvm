/* automatically generated by rust-bindgen 0.59.2 */

pub const SKP_USE_DOUBLE_PRECISION_FLOATS: u32 = 0;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const FLT_EVAL_METHOD: u32 = 0;
pub const DBL_DECIMAL_DIG: u32 = 17;
pub const DBL_DIG: u32 = 15;
pub const DBL_HAS_SUBNORM: u32 = 1;
pub const DBL_MANT_DIG: u32 = 53;
pub const DBL_MAX_10_EXP: u32 = 308;
pub const DBL_MAX_EXP: u32 = 1024;
pub const DBL_MIN_10_EXP: i32 = -307;
pub const DBL_MIN_EXP: i32 = -1021;
pub const _DBL_RADIX: u32 = 2;
pub const FLT_DECIMAL_DIG: u32 = 9;
pub const FLT_DIG: u32 = 6;
pub const FLT_HAS_SUBNORM: u32 = 1;
pub const FLT_GUARD: u32 = 0;
pub const FLT_MANT_DIG: u32 = 24;
pub const FLT_MAX_10_EXP: u32 = 38;
pub const FLT_MAX_EXP: u32 = 128;
pub const FLT_MIN_10_EXP: i32 = -37;
pub const FLT_MIN_EXP: i32 = -125;
pub const FLT_NORMALIZE: u32 = 0;
pub const FLT_RADIX: u32 = 2;
pub const LDBL_DIG: u32 = 15;
pub const LDBL_HAS_SUBNORM: u32 = 1;
pub const LDBL_MANT_DIG: u32 = 53;
pub const LDBL_MAX_10_EXP: u32 = 308;
pub const LDBL_MAX_EXP: u32 = 1024;
pub const LDBL_MIN_10_EXP: i32 = -307;
pub const LDBL_MIN_EXP: i32 = -1021;
pub const _LDBL_RADIX: u32 = 2;
pub const DECIMAL_DIG: u32 = 17;
pub const _SW_INEXACT: u32 = 1;
pub const _SW_UNDERFLOW: u32 = 2;
pub const _SW_OVERFLOW: u32 = 4;
pub const _SW_ZERODIVIDE: u32 = 8;
pub const _SW_INVALID: u32 = 16;
pub const _SW_DENORMAL: u32 = 524288;
pub const _EM_AMBIGUIOUS: u32 = 2147483648;
pub const _EM_AMBIGUOUS: u32 = 2147483648;
pub const _MCW_EM: u32 = 524319;
pub const _EM_INEXACT: u32 = 1;
pub const _EM_UNDERFLOW: u32 = 2;
pub const _EM_OVERFLOW: u32 = 4;
pub const _EM_ZERODIVIDE: u32 = 8;
pub const _EM_INVALID: u32 = 16;
pub const _EM_DENORMAL: u32 = 524288;
pub const _MCW_RC: u32 = 768;
pub const _RC_NEAR: u32 = 0;
pub const _RC_DOWN: u32 = 256;
pub const _RC_UP: u32 = 512;
pub const _RC_CHOP: u32 = 768;
pub const _MCW_PC: u32 = 196608;
pub const _PC_64: u32 = 0;
pub const _PC_53: u32 = 65536;
pub const _PC_24: u32 = 131072;
pub const _MCW_IC: u32 = 262144;
pub const _IC_AFFINE: u32 = 262144;
pub const _IC_PROJECTIVE: u32 = 0;
pub const _MCW_DN: u32 = 50331648;
pub const _DN_SAVE: u32 = 0;
pub const _DN_FLUSH: u32 = 16777216;
pub const _DN_FLUSH_OPERANDS_SAVE_RESULTS: u32 = 33554432;
pub const _DN_SAVE_OPERANDS_FLUSH_RESULTS: u32 = 50331648;
pub const _SW_UNEMULATED: u32 = 64;
pub const _SW_SQRTNEG: u32 = 128;
pub const _SW_STACKOVERFLOW: u32 = 512;
pub const _SW_STACKUNDERFLOW: u32 = 1024;
pub const _FPE_INVALID: u32 = 129;
pub const _FPE_DENORMAL: u32 = 130;
pub const _FPE_ZERODIVIDE: u32 = 131;
pub const _FPE_OVERFLOW: u32 = 132;
pub const _FPE_UNDERFLOW: u32 = 133;
pub const _FPE_INEXACT: u32 = 134;
pub const _FPE_UNEMULATED: u32 = 135;
pub const _FPE_SQRTNEG: u32 = 136;
pub const _FPE_STACKOVERFLOW: u32 = 138;
pub const _FPE_STACKUNDERFLOW: u32 = 139;
pub const _FPE_EXPLICITGEN: u32 = 140;
pub const _FPE_MULTIPLE_TRAPS: u32 = 141;
pub const _FPE_MULTIPLE_FAULTS: u32 = 142;
pub const _FPCLASS_SNAN: u32 = 1;
pub const _FPCLASS_QNAN: u32 = 2;
pub const _FPCLASS_NINF: u32 = 4;
pub const _FPCLASS_NN: u32 = 8;
pub const _FPCLASS_ND: u32 = 16;
pub const _FPCLASS_NZ: u32 = 32;
pub const _FPCLASS_PZ: u32 = 64;
pub const _FPCLASS_PD: u32 = 128;
pub const _FPCLASS_PN: u32 = 256;
pub const _FPCLASS_PINF: u32 = 512;
pub const _CW_DEFAULT: u32 = 524319;
pub const DBL_RADIX: u32 = 2;
pub const LDBL_RADIX: u32 = 2;
pub const EM_AMBIGUIOUS: u32 = 2147483648;
pub const EM_AMBIGUOUS: u32 = 2147483648;
pub const MCW_EM: u32 = 524319;
pub const EM_INVALID: u32 = 16;
pub const EM_DENORMAL: u32 = 524288;
pub const EM_ZERODIVIDE: u32 = 8;
pub const EM_OVERFLOW: u32 = 4;
pub const EM_UNDERFLOW: u32 = 2;
pub const EM_INEXACT: u32 = 1;
pub const MCW_IC: u32 = 262144;
pub const IC_AFFINE: u32 = 262144;
pub const IC_PROJECTIVE: u32 = 0;
pub const MCW_RC: u32 = 768;
pub const RC_CHOP: u32 = 768;
pub const RC_UP: u32 = 512;
pub const RC_DOWN: u32 = 256;
pub const RC_NEAR: u32 = 0;
pub const MCW_PC: u32 = 196608;
pub const PC_24: u32 = 131072;
pub const PC_53: u32 = 65536;
pub const PC_64: u32 = 0;
pub const CW_DEFAULT: u32 = 524319;
pub const SW_INVALID: u32 = 16;
pub const SW_DENORMAL: u32 = 524288;
pub const SW_ZERODIVIDE: u32 = 8;
pub const SW_OVERFLOW: u32 = 4;
pub const SW_UNDERFLOW: u32 = 2;
pub const SW_INEXACT: u32 = 1;
pub const SW_UNEMULATED: u32 = 64;
pub const SW_SQRTNEG: u32 = 128;
pub const SW_STACKOVERFLOW: u32 = 512;
pub const SW_STACKUNDERFLOW: u32 = 1024;
pub const FPE_INVALID: u32 = 129;
pub const FPE_DENORMAL: u32 = 130;
pub const FPE_ZERODIVIDE: u32 = 131;
pub const FPE_OVERFLOW: u32 = 132;
pub const FPE_UNDERFLOW: u32 = 133;
pub const FPE_INEXACT: u32 = 134;
pub const FPE_UNEMULATED: u32 = 135;
pub const FPE_SQRTNEG: u32 = 136;
pub const FPE_STACKOVERFLOW: u32 = 138;
pub const FPE_STACKUNDERFLOW: u32 = 139;
pub const FPE_EXPLICITGEN: u32 = 140;
pub const SKP_int32_MAX: u32 = 2147483647;
pub const SKP_int16_MAX: u32 = 32767;
pub const SKP_int8_MAX: u32 = 127;
pub const SKP_uint32_MAX: u32 = 4294967295;
pub const SKP_uint32_MIN: u32 = 0;
pub const SKP_uint16_MAX: u32 = 65535;
pub const SKP_uint16_MIN: u32 = 0;
pub const SKP_uint8_MAX: u32 = 255;
pub const SKP_uint8_MIN: u32 = 0;
pub const SKP_TRUE: u32 = 1;
pub const SKP_FALSE: u32 = 0;
pub const _CRT_WARN: u32 = 0;
pub const _CRT_ERROR: u32 = 1;
pub const _CRT_ASSERT: u32 = 2;
pub const _CRT_ERRCNT: u32 = 3;
pub const _CRTDBG_MODE_FILE: u32 = 1;
pub const _CRTDBG_MODE_DEBUG: u32 = 2;
pub const _CRTDBG_MODE_WNDW: u32 = 4;
pub const _CRTDBG_REPORT_MODE: i32 = -1;
pub const _CRT_RPTHOOK_INSTALL: u32 = 0;
pub const _CRT_RPTHOOK_REMOVE: u32 = 1;
pub const _HOOK_ALLOC: u32 = 1;
pub const _HOOK_REALLOC: u32 = 2;
pub const _HOOK_FREE: u32 = 3;
pub const _CRTDBG_ALLOC_MEM_DF: u32 = 1;
pub const _CRTDBG_DELAY_FREE_MEM_DF: u32 = 2;
pub const _CRTDBG_CHECK_ALWAYS_DF: u32 = 4;
pub const _CRTDBG_RESERVED_DF: u32 = 8;
pub const _CRTDBG_CHECK_CRT_DF: u32 = 16;
pub const _CRTDBG_LEAK_CHECK_DF: u32 = 32;
pub const _CRTDBG_CHECK_EVERY_16_DF: u32 = 1048576;
pub const _CRTDBG_CHECK_EVERY_128_DF: u32 = 8388608;
pub const _CRTDBG_CHECK_EVERY_1024_DF: u32 = 67108864;
pub const _CRTDBG_CHECK_DEFAULT_DF: u32 = 0;
pub const _CRTDBG_REPORT_FLAG: i32 = -1;
pub const _FREE_BLOCK: u32 = 0;
pub const _NORMAL_BLOCK: u32 = 1;
pub const _CRT_BLOCK: u32 = 2;
pub const _IGNORE_BLOCK: u32 = 3;
pub const _CLIENT_BLOCK: u32 = 4;
pub const _MAX_BLOCKS: u32 = 5;
pub const _UNKNOWN_BLOCK: i32 = -1;
pub const SKP_SILK_NO_ERROR: u32 = 0;
pub const SKP_SILK_ENC_INPUT_INVALID_NO_OF_SAMPLES: i32 = -1;
pub const SKP_SILK_ENC_FS_NOT_SUPPORTED: i32 = -2;
pub const SKP_SILK_ENC_PACKET_SIZE_NOT_SUPPORTED: i32 = -3;
pub const SKP_SILK_ENC_PAYLOAD_BUF_TOO_SHORT: i32 = -4;
pub const SKP_SILK_ENC_INVALID_LOSS_RATE: i32 = -5;
pub const SKP_SILK_ENC_INVALID_COMPLEXITY_SETTING: i32 = -6;
pub const SKP_SILK_ENC_INVALID_INBAND_FEC_SETTING: i32 = -7;
pub const SKP_SILK_ENC_INVALID_DTX_SETTING: i32 = -8;
pub const SKP_SILK_ENC_INTERNAL_ERROR: i32 = -9;
pub const SKP_SILK_DEC_INVALID_SAMPLING_FREQUENCY: i32 = -10;
pub const SKP_SILK_DEC_PAYLOAD_TOO_LARGE: i32 = -11;
pub const SKP_SILK_DEC_PAYLOAD_ERROR: i32 = -12;
pub const SILK_MAX_FRAMES_PER_PACKET: u32 = 5;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_pctype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_mb_cur_max as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_lc_codepage as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).locinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).mbcinfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Wchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Byte as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._State as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
extern "C" {
    pub fn _clearfp() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _controlfp(
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _set_controlfp(_NewValue: ::std::os::raw::c_uint, _Mask: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _controlfp_s(
        _CurrentState: *mut ::std::os::raw::c_uint,
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> errno_t;
}
extern "C" {
    pub fn _statusfp() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _fpreset();
}
extern "C" {
    pub fn _control87(
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __fpecode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpe_flt_rounds() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _copysign(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn _chgsign(_X: f64) -> f64;
}
extern "C" {
    pub fn _scalb(_X: f64, _Y: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn _logb(_X: f64) -> f64;
}
extern "C" {
    pub fn _nextafter(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn _finite(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isnan(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fpclass(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _scalbf(_X: f32, _Y: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn fpreset();
}
pub type _HFILE = *mut ::std::os::raw::c_void;
pub type _CRT_REPORT_HOOK = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type _CRT_REPORT_HOOKW = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut wchar_t,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type _CRT_ALLOC_HOOK = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_long,
        arg6: *const ::std::os::raw::c_uchar,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type _CRT_DUMP_CLIENT =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: size_t)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CrtMemBlockHeader {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CrtMemState {
    pub pBlockHeader: *mut _CrtMemBlockHeader,
    pub lCounts: [size_t; 5usize],
    pub lSizes: [size_t; 5usize],
    pub lHighWaterCount: size_t,
    pub lTotalCount: size_t,
}
#[test]
fn bindgen_test_layout__CrtMemState() {
    assert_eq!(
        ::std::mem::size_of::<_CrtMemState>(),
        104usize,
        concat!("Size of: ", stringify!(_CrtMemState))
    );
    assert_eq!(
        ::std::mem::align_of::<_CrtMemState>(),
        8usize,
        concat!("Alignment of ", stringify!(_CrtMemState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CrtMemState>())).pBlockHeader as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CrtMemState),
            "::",
            stringify!(pBlockHeader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CrtMemState>())).lCounts as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CrtMemState),
            "::",
            stringify!(lCounts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CrtMemState>())).lSizes as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_CrtMemState),
            "::",
            stringify!(lSizes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CrtMemState>())).lHighWaterCount as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_CrtMemState),
            "::",
            stringify!(lHighWaterCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CrtMemState>())).lTotalCount as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_CrtMemState),
            "::",
            stringify!(lTotalCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SKP_SILK_SDK_EncControlStruct {
    pub API_sampleRate: ::std::os::raw::c_int,
    pub maxInternalSampleRate: ::std::os::raw::c_int,
    pub packetSize: ::std::os::raw::c_int,
    pub bitRate: ::std::os::raw::c_int,
    pub packetLossPercentage: ::std::os::raw::c_int,
    pub complexity: ::std::os::raw::c_int,
    pub useInBandFEC: ::std::os::raw::c_int,
    pub useDTX: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SKP_SILK_SDK_EncControlStruct() {
    assert_eq!(
        ::std::mem::size_of::<SKP_SILK_SDK_EncControlStruct>(),
        32usize,
        concat!("Size of: ", stringify!(SKP_SILK_SDK_EncControlStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<SKP_SILK_SDK_EncControlStruct>(),
        4usize,
        concat!("Alignment of ", stringify!(SKP_SILK_SDK_EncControlStruct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SKP_SILK_SDK_EncControlStruct>())).API_sampleRate as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SKP_SILK_SDK_EncControlStruct),
            "::",
            stringify!(API_sampleRate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SKP_SILK_SDK_EncControlStruct>())).maxInternalSampleRate
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SKP_SILK_SDK_EncControlStruct),
            "::",
            stringify!(maxInternalSampleRate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SKP_SILK_SDK_EncControlStruct>())).packetSize as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SKP_SILK_SDK_EncControlStruct),
            "::",
            stringify!(packetSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SKP_SILK_SDK_EncControlStruct>())).bitRate as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SKP_SILK_SDK_EncControlStruct),
            "::",
            stringify!(bitRate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SKP_SILK_SDK_EncControlStruct>())).packetLossPercentage
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SKP_SILK_SDK_EncControlStruct),
            "::",
            stringify!(packetLossPercentage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SKP_SILK_SDK_EncControlStruct>())).complexity as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SKP_SILK_SDK_EncControlStruct),
            "::",
            stringify!(complexity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SKP_SILK_SDK_EncControlStruct>())).useInBandFEC as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SKP_SILK_SDK_EncControlStruct),
            "::",
            stringify!(useInBandFEC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SKP_SILK_SDK_EncControlStruct>())).useDTX as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SKP_SILK_SDK_EncControlStruct),
            "::",
            stringify!(useDTX)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SKP_SILK_SDK_DecControlStruct {
    pub API_sampleRate: ::std::os::raw::c_int,
    pub frameSize: ::std::os::raw::c_int,
    pub framesPerPacket: ::std::os::raw::c_int,
    pub moreInternalDecoderFrames: ::std::os::raw::c_int,
    pub inBandFECOffset: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SKP_SILK_SDK_DecControlStruct() {
    assert_eq!(
        ::std::mem::size_of::<SKP_SILK_SDK_DecControlStruct>(),
        20usize,
        concat!("Size of: ", stringify!(SKP_SILK_SDK_DecControlStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<SKP_SILK_SDK_DecControlStruct>(),
        4usize,
        concat!("Alignment of ", stringify!(SKP_SILK_SDK_DecControlStruct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SKP_SILK_SDK_DecControlStruct>())).API_sampleRate as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SKP_SILK_SDK_DecControlStruct),
            "::",
            stringify!(API_sampleRate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SKP_SILK_SDK_DecControlStruct>())).frameSize as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SKP_SILK_SDK_DecControlStruct),
            "::",
            stringify!(frameSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SKP_SILK_SDK_DecControlStruct>())).framesPerPacket as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SKP_SILK_SDK_DecControlStruct),
            "::",
            stringify!(framesPerPacket)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SKP_SILK_SDK_DecControlStruct>())).moreInternalDecoderFrames
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SKP_SILK_SDK_DecControlStruct),
            "::",
            stringify!(moreInternalDecoderFrames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SKP_SILK_SDK_DecControlStruct>())).inBandFECOffset as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SKP_SILK_SDK_DecControlStruct),
            "::",
            stringify!(inBandFECOffset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SKP_Silk_TOC_struct {
    pub framesInPacket: ::std::os::raw::c_int,
    pub fs_kHz: ::std::os::raw::c_int,
    pub inbandLBRR: ::std::os::raw::c_int,
    pub corrupt: ::std::os::raw::c_int,
    pub vadFlags: [::std::os::raw::c_int; 5usize],
    pub sigtypeFlags: [::std::os::raw::c_int; 5usize],
}
#[test]
fn bindgen_test_layout_SKP_Silk_TOC_struct() {
    assert_eq!(
        ::std::mem::size_of::<SKP_Silk_TOC_struct>(),
        56usize,
        concat!("Size of: ", stringify!(SKP_Silk_TOC_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<SKP_Silk_TOC_struct>(),
        4usize,
        concat!("Alignment of ", stringify!(SKP_Silk_TOC_struct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SKP_Silk_TOC_struct>())).framesInPacket as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SKP_Silk_TOC_struct),
            "::",
            stringify!(framesInPacket)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SKP_Silk_TOC_struct>())).fs_kHz as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SKP_Silk_TOC_struct),
            "::",
            stringify!(fs_kHz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SKP_Silk_TOC_struct>())).inbandLBRR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SKP_Silk_TOC_struct),
            "::",
            stringify!(inbandLBRR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SKP_Silk_TOC_struct>())).corrupt as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SKP_Silk_TOC_struct),
            "::",
            stringify!(corrupt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SKP_Silk_TOC_struct>())).vadFlags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SKP_Silk_TOC_struct),
            "::",
            stringify!(vadFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SKP_Silk_TOC_struct>())).sigtypeFlags as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SKP_Silk_TOC_struct),
            "::",
            stringify!(sigtypeFlags)
        )
    );
}
extern "C" {
    pub fn SKP_Silk_SDK_Get_Encoder_Size(
        encSizeBytes: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SKP_Silk_SDK_InitEncoder(
        encState: *mut ::std::os::raw::c_void,
        encStatus: *mut SKP_SILK_SDK_EncControlStruct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SKP_Silk_SDK_QueryEncoder(
        encState: *const ::std::os::raw::c_void,
        encStatus: *mut SKP_SILK_SDK_EncControlStruct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SKP_Silk_SDK_Encode(
        encState: *mut ::std::os::raw::c_void,
        encControl: *const SKP_SILK_SDK_EncControlStruct,
        samplesIn: *const ::std::os::raw::c_short,
        nSamplesIn: ::std::os::raw::c_int,
        outData: *mut ::std::os::raw::c_uchar,
        nBytesOut: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SKP_Silk_SDK_Get_Decoder_Size(
        decSizeBytes: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SKP_Silk_SDK_InitDecoder(decState: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SKP_Silk_SDK_Decode(
        decState: *mut ::std::os::raw::c_void,
        decControl: *mut SKP_SILK_SDK_DecControlStruct,
        lostFlag: ::std::os::raw::c_int,
        inData: *const ::std::os::raw::c_uchar,
        nBytesIn: ::std::os::raw::c_int,
        samplesOut: *mut ::std::os::raw::c_short,
        nSamplesOut: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SKP_Silk_SDK_search_for_LBRR(
        inData: *const ::std::os::raw::c_uchar,
        nBytesIn: ::std::os::raw::c_int,
        lost_offset: ::std::os::raw::c_int,
        LBRRData: *mut ::std::os::raw::c_uchar,
        nLBRRBytes: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn SKP_Silk_SDK_get_TOC(
        inData: *const ::std::os::raw::c_uchar,
        nBytesIn: ::std::os::raw::c_int,
        Silk_TOC: *mut SKP_Silk_TOC_struct,
    );
}
extern "C" {
    pub fn SKP_Silk_SDK_get_version() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
